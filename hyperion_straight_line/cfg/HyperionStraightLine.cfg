#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author: 

PACKAGE='hyperion_straight_line'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#       Name                       Type       Reconfiguration level            Description                       Default   Min   Max
#gen.add("velocity_scale_factor",  double_t,  0,                               "Maximum velocity scale factor",  0.5,      0.0,  1.0)
gen.add("kp",  double_t,  0,  "The kp parameter and, in case of tunning, the first value fo the parameter",  0.0,   0.0)
gen.add("ki",  double_t,  0,  "The ki parameter and, in case of tunning, the first value fo the parameter",  0.0,   0.0)
gen.add("kd",  double_t,  0,  "The kd parameter and, in case of tunning, the first value fo the parameter",  0.0,   0.0)
gen.add("pid_freq",  int_t,  0,  "The pid_out calling frequency",  100,   10)
gen.add("max_speed",  int_t,  0,  "The maximum motor speed",  100,   0, 100)
gen.add("turn_speed_saturation",  int_t,  0,  "The minimum motor speed for the slower wheel when turning", 0, -100, 100)
gen.add("stop_button",  int_t,  0,  "The stop button on the array",  5,   0, 12)

pid_tunning_type = gen.enum([ gen.const("none", int_t, 0, "No tunning"),
                              gen.const("kp", int_t, 1, "Kp tunning"),
                              gen.const("ki", int_t, 2, "Ki tunning"),
                              gen.const("kd", int_t, 3, "Kd tunning")],
                             "The posibles tunning types")

gen.add("tunning_inc",    double_t,  0,  "The tunning increment of the PID values",   0.01)
gen.add("pid_mean_size",  int_t,     0,  "The size of the mean filter for the error", 9,    0, 20)
gen.add("pid_tunning",    int_t,     0,  "Enum to know if we are tunning the pid and what parameter we are tunning", 0, 0, 3, edit_method=pid_tunning_type)

error_calculation_mode = gen.enum([ gen.const("both",  int_t, 0, "The error is calculated by the difference between the two sensors measuraments"),
                      gen.const("left",  int_t, 1, "The error is calculated only by the left sensor"),
                      gen.const("right", int_t, 2, "The error is calculated only by the right sensor")],
                     "The posibles modes to calculate the error")

gen.add("error_calculation",  int_t,     0, "Enum to know how we are calculating the error", 0, 0, 2, edit_method=error_calculation_mode)
gen.add("center_dist",        double_t,  0, "The center distance to calculate the error when we are on a one-sided wall mode in mm", 270.0, 0.0)

exit(gen.generate(PACKAGE, "HyperionStraightLineAlgorithm", "HyperionStraightLine"))
